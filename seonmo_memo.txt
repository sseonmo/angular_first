- ng new <project_name> : 프로젝트 생성
- ng serve (default port :4200)
- ng serve --o : 브라우저실행
- ng serve --port : 특정포트로 구동
- ng g(generate) <구성요소> <구성요서명> : 구성요소(component, service, directive, pipe, module, class, interface, enum, grard)
- ng bulid --prod(운영환경 build시)


- Angular Material & Angular Material CDK 설치
  npm install --save @angular/material @angular/cdk

- Angular Animation Module 설치
  npm install --save @angular/animations

  몇몇개의 Material Component는 Angular Animation Module에 의존성을 가지고 있습니다.
  따라서 다음 명령을 수행시켜 Angular Animation Module을 설치해야 합니다

- Gestures 지원을 위한 HammerJS 설치
  npm install --save hammerjs

- Bootstrap 설치
  npm install bootstrap@4.0.0-beta.2

- production build
  ng build --prod --base-href=/my-base-url/

- @Input() : 속성바인딩을 이용해 자식 컴포넌트에 정보를 전달
- @Output() : EventEmitter와 이벤트 바인딩을 이용해 부모 컴포넌트에 정보전달

- @ViewChild와 @ViewChildren을 이용해 자식 Component의 객체를 제어함.
  ElementRef type의 객체를 획득하면 nativeElement 속성으로 직접 제어가능.

- Content Projection : 부모 Component가 자식 Component에게 template을 전달해 줄 수 있는 기능 - <ng-content></ng-content> 이용함

- Service - constructor(private httpSupportService:HttpSupportService,
                        @optional private jsonConfig:JsonConfig) { } - Optional Dependency는 의존객체의 주입이 필수가 아니라는 것을 의미 / 단순히 생성자에서 의존객체를 주입받을 때 @Optional decorator를 명시하면 됨.



--- LifeCycle------------------------------------------------

- constructor : TypeScript에서는 일반적으로 constructor에서 초기화를 진행됨. Angular에서 사용하는 속성의 초기화는 ngOnInit에서 하는것이 좋음.

- ngOnChanges : 부모 Component에서 자식 Component로 데이터가 binding 될 때 혹은 변경되었을 때 호출됨. / ngOnChanges hook method의 인자로 SimpleChanges

- ngOnInit : ngOnChanges가 호출된 이후에 모든 속성에 대한 초기화가 완료된 시점에 딱 한번만 호출됨.

- ngDoCheck : ngOnInit hook method가 호출된 이후에 호출.
              reference객체의 속성변경에 대한 모든 변경에 대해 해당 hook mehtod가 호출됨.
              ngDoCheck을 많이 사용하게 되면 그만큼 성능이 저하될 수 있음.

- ngAfterContentInit, ngAfterContentChecked : 최초의 ngDoCheck hook method가 호출된 후에 한번만 호출되며 앞서 배운 ngContent directive를 이용해
                                              부모 Component의 template 일부를 자식 Component에서 projection한 후 호출됨.

- ngAfterViewInit, ngAfterViewChecked : Component에 속한 모든 View와 ViewChild가 시작되고 나서 호출됩니다. 쉽게 생각하면 HTML이 모두 화면에
                                        출력된 후 호출된다고 생각 하시면 됩니다. ngAfterViewChecked는 Component의 View에 대한 Change Detection이 실행되고 난 후 호출

- ngOnDestroy : Component가 소멸하기 직전에 호출됩니다. 일반적으로 사용된 자원에 대한 해제 코드가 들어옵니다.
